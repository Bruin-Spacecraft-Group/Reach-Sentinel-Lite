36,39c43,46
< #TODO function for dynamicaly assessing calibration constants
< ACCX_CALIB = 0
< ACCY_CALIB = 0
< ACCZ_CALIB = 0
---
> downlink = IsLive.objects.create() # ----------------- * * * ----------------- INITIALLY FALSE, ON BUTTON-CLICK IN DASH, TRUE
> 
> #Open serial port to recieve downlinked data
> ser = openSerialPort('COM4')
50c57
< GPSLONG = 8
---
> GPSLON = 8
52c59
< GPSHR = 10
---
> GPSHOUR = 10
54a62,65
> #MAGX = 7
> #MAGY = 8
> #MAGZ = 9
> #MAGHEAD = 10
56c67
< PRESSURE = 14
---
> PRESS = 14
60,69c71,77
< '''
< MAGX = 7
< MAGY = 8
< MAGZ = 9
< MAGHEAD = 10
< TEMP = 11
< PRESSURE = 13
< ALTITUDE = 12
< BAROTEMP = 14
< '''
---
> ##Initiate variables
> FIRST = True
> oldtime = 0
> oldGPSTime = 0
> GPSInit()
> myData = DataObject()
> dropped = 0
71d78
< tots_not_launch = 1
73,132c80
< 
< # --------------------------------------------- * * * ---------------------------------------------
< 
< os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'reachSentinelLite.settings')
< django.setup()
< 
< print("\n\n\n")
< print(
< 	'             ||---------------------------- * * * -------------------------\\\\\n'\
< 	'             ||   ______                    _____                           \\\\\n'\
< 	'       ######||   | ___ \           ()     /  ___|                           \\\\\n'\
< 	'  ###########||   | |_/ /_ __ _   _ _ _ __ \ `--. _ __   __  _  ___ ___       \\\\\n'\
< 	"#############||   | ___ \ '__| | | | | '_ \ `--. \ '_ \ / _\| |/ __/ _ \       \\\\\n"\
< 	'   ##########||   | |_/ / |  | |_| | | | | /\__/ / |_) | (_ | | (__| __/       //\n'\
< 	'        #####||   \____/|_|   \__,_|_|_| |_\____/| .__/ \__/|_|\___\___|      //\n'\
< 	'      #######||                                  | |                         //\n'\
< 	'             ||                                  |_|                        //\n'\
< 	'             ||---------------------------- * * * -------------------------//\n')
< 
< print("\n\n\n")
< 
< # Dabatase checks
< if TimeInit.objects.count() != 0:
< 	for elem in IsLive.objects.all():
< 		elem.delete()
< 
< TimeInit.objects.create()
< 
< if Telemetry.objects.count() != 0:
< 	for elem in Telemetry.objects.all():
< 		elem.delete()
< 
< if Telemetry.objects.count() == 0:
< 	Telemetry.objects.create() # zero data-point
< 	if (DEBUG):
< 		exec(open("dummyTelem.py").read())
< 		print("READ dummyTelem.py")
< 
< if IsLive.objects.count() != 0:  # ------------------ * * * ------------------ REQUIRES TESTING
< 	for elem in IsLive.objects.all():
< 		elem.delete()
< 
< downlink = IsLive.objects.create() # ----------------- * * * ----------------- INITIALLY FALSE, ON BUTTON-CLICK IN DASH, TRUE
< 
< try:
< 	print("Opening Serial Port...")
< 	#initiate serial port to read data from
< 	SERIAL_PORT = '/dev/cu.usbmodem14311'  # '/dev/cu.usbmodem14321'
< 	ser = serial.Serial(
< 	    port=SERIAL_PORT,
< 	    baudrate=9600,
< 	    timeout=3,                         # give up reading after 3 seconds
< 	    parity=serial.PARITY_ODD,
< 	    stopbits=serial.STOPBITS_TWO,
< 	    bytesize=serial.SEVENBITS
< 	)
< 	print("connected to port " + SERIAL_PORT)
< except:
< 	print("<== Error connecting to " + SERIAL_PORT + " ==>")
< 	exit()
---
> dataString = ''
143,144c91,92
< isFirst = True
< dataString = '' # --------------------- * * * ----------------------------------- EDIT!!!
---
> #Calibrate inertial gravity vector
> myData.calibrate(ser, txtfile, [ACCELX, ACCELY, ACCELZ])
147,159c95,97
< while ser.isOpen():
< 	try:
< 		#get data
< 		print('reading...')
< 		dataString = str(ser.readline())
< 		print(dataString)
< 		'''
< 		if(dataString == "b''"):
< 			dropped += 1
< 		'''
< 	except:
< 		print("could not read")
< 		continue
---
> while True:
> 	data = readFromSerial(ser, txtfile)
> 	if data == -1: continue
162,187d99
< 		print('Writing to textfile')
< 		txtfile.write(dataString)
< 		txtfile.flush()
< 	except:
< 		pass
< 
< 	try:
< 		dataString = dataString[2:len(dataString)-5]
< 		print('Received: ' + dataString)
< 		data = dataString.split(",")
< 		#had problems with only reading in a few data 
< 		if (len(data) < 6):
< 			print("not enough data")
< 			continue
< 
< 		#adjust for NANs
< 		print('Checking for NANs')
< 		nans = 0
< 		for i in range(len(data)):
< 			if "NAN" in data[i]:
< 				data[i] = float('nan')
< 				nans += 1
< 				continue
< 			data[i] = float(data[i])
< 		print('NANs: ' + str(nans))
< 
193a106
> 		print('step 1')
196a110
> 		print('step 2')
202a117
> 		print('step 3')
211,212d125
< 			
< 		print(data)
214,232c127,145
< 		if (isFirst):
< 			TimeInit.objects.get().timeInit = datetime.datetime.now() - data[TIMESTAMP]
< 			isFirst = False
< 
< 		print("Timestamp", data[TIMESTAMP])
< 
< 		print('--------')
< 
< 		new_data = Telemetry.objects.create(  # -------------- * * * -------------- SAVE TO DATABASE
< 		timestamp = data[TIMESTAMP], 
< 		accel_x   = data[ACCELX], 
< 		accel_y   = data[ACCELY], 
< 		accel_z   = data[ACCELZ], 
< 		gyro_x    = data[GYROX], 
< 		gyro_y    = data[GYROY], 
< 		gyro_z    = data[GYROZ],
< 		barometer = data[ALTITUDE],
< 		#temp = data[TEMP]
< 		)
---
> 		print('populated')
> 		'''
> 		#Save raw data to database
> 		#TODO: Why are we doing this??
> 		new_data = Telemetry.objects.create(  #-------------- * * * -------------- SAVE TO DATABASE
> 			#timestamp=myData.timestamp, 
> 			timestamp = datetime.datetime.now(),
> 			accel_x=data[ACCELX], 
> 			accel_y= data[ACCELY], 
> 			accel_z= data[ACCELZ], 
> 			gyro_x=data[GYROX], 
> 			gyro_y=data[GYROY], 
> 			gyro_z= data[GYROZ],
> 			#mag_x = data[MAGX],
> 			#mag_y = data[MAGY],
> 			#mag_z = data[MAGZ],
> 			#maghead = data[MAGHEAD],
> 			barometer=data[ALTITUDE],
> 			temp=data[TEMP])
233a147,175
> 		'''
> 		###PROCESS
> 		#establish time elapsed
> 		dt = (myData.timestamp - oldtime)/1000.0 #convert ms to s
> 		print(myData.timestamp)
> 		print(oldtime)
> 		oldtime = myData.timestamp
> 		print(str(dt))
> 		'''
> 		append altitude calculated from pressure
> 		data.append(altitudeCalc(data[1]))
> 		'''
> 		#process acceleration
> 		acceleration.findInertialFrameAccel(myData, dt)
> 		print('found acceleration')
> 		#integrate to find velocity and positino
> 		acceleration.calculateVelocityAndPosition(myData, dt)
> 		print('found vel and pos')
> 		#Process GPS coordinates
> 		if myData.gps_sec != oldGPSTime:
> 			oldGPSTime = myData.gps_sec
> 			processCoordinates(myData.gps_lon, myData.gps_lat, myData.gps_alt)
> 			print('processed coordinates')
> 		'''
> 		#append absolute time
> 		data.append(time.time())
> 		'''
> 		myData.printData()
> 		#print(dropped)
235,236c177
< 		#for the first few iterations, just take the 
< 		#accelerometer data to calibrate the offsets
---
> 		######SAVE TO DATABASE
238,314d178
< 		if(count<6):
< 			print('Calibrating...')
< 			myData.accx_calib += myData.accel_x
< 			myData.accy_calib += myData.accel_y
< 			myData.accz_calib += myData.accel_z
< 			count+=1
< 			#establish spacecraft time
< 			oldtime = myData.timestamp
< 		
< 		else:
< 			print('processing...')
< 			if(count==6):
< 				myData.accx_calib = myData.accx_calib/6
< 				myData.accy_calib = myData.accy_calib/6
< 				myData.accz_calib = myData.accz_calib/6
< 				count+=1
< 				myData.printCalibration()
< 				#print('Calibration: ' + str(ACCX_CALIB) + ', ' + str(ACCY_CALIB) + ', ' + str(ACCZ_CALIB))
< 		
< 			##DO STUFF WITH DATA
< 			#establish time elapsed
< 			dt = (myData.timestamp - oldtime)/1000.0 #convert ms to s
< 			oldtime = myData.timestamp
< 			print(str(dt))
< 			'''
< 			append altitude calculated from pressure
< 			data.append(altitudeCalc(data[1]))
< 			'''
< 			#process acceleration
< 			acceleration.findInertialFrameAccel(myData, dt)
< 			#myAcceleration = acceleration.findInertialFrameAccel(data[ACCELX], data[ACCELY], data[ACCELZ], data[GYROX], data[GYROY], data[GYROZ], dt, [ACCX_CALIB, ACCY_CALIB, ACCZ_CALIB])
< 			print('found acceleration')
< 			#integrate to find velocity and positino
< 			acceleration.calculateVelocityAndPosition(myData, dt)
< 			print('found vel and pos')
< 			#Process GPS coordinates
< 			if myData.gps_sec != oldGPSTime:
< 				processCoordinates(myData.gps_lon, myData.gps_lat, myData.gps_alt)
< 				print('processed coordinates')
< 			'''
< 			#append absolute time
< 			data.append(time.time())
< 			'''
< 			finalData = ""
< 			for i in range(len(data)-1):
< 				#print data[i]
< 				finalData = finalData + str(data[i]) + ", "
< 				'''
< 				finalData contents should be as follows, 
< 				as a string separated by commas:
< 				relative spacecraft time 
< 				raw accelX
< 				raw accelY
< 				raw accelZ
< 				gyroX
< 				gyroY
< 				gyroZ
< 				magX - NO
< 				magY - NO
< 				magZ - NO
< 				magHead - NO
< 				temp(C)
< 				altitude
< 				inertial accelX
< 				inertial accelY
< 				inertial accelZ
< 				velX
< 				velY
< 				velZ
< 				posX
< 				posY
< 				posZ
< 				absTime - NO
< 				'''
< 			print(finalData)
< 			myData.printData()
< 			print(dropped)
317c181
< 		print(dropped)
---
> 		#print(dropped)
319c183
< 		######SAVE TO DATABASE
---
> 		
336d199
< 
